apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}
  labels:
    app: {{ $.Chart.Name }}
    release: {{ $.Release.Name }}
spec:
  replicas: 1
  minReadySeconds: 10
  selector:
    matchLabels:
      app: {{ $.Chart.Name }}
      release: {{ $.Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include "caddyfile" . | sha256sum }}
      labels:
        app: {{ $.Chart.Name }}
        release: {{ $.Release.Name }}
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: {{ $.Release.Name }}
      containers:
      - name: caddy
        image: caddy:{{ $.Chart.AppVersion }}
        command: ["caddy"]
        args: ["run", "--config", "/etc/caddy/caddyfile"]
        env:
        {{- range $name, $value := $.Values.environment }}
        - name: "{{ $name }}"
          value: "{{ $value }}"
        {{- end }}
        # below, we claim ports 80 and 443 on the entire node
        # so, implicitly, only one caddy pod per node using this
        # also means we need no service.yaml, as this does that job
        ports:
        - name: {{ $.Release.Name }}-http
          containerPort: 80
          protocol: TCP
          hostPort: 80
        - name: {{ $.Release.Name }}-https
          containerPort: 443
          protocol: TCP
          hostPort: 443
        volumeMounts:
        - name: {{ $.Release.Name }}-data
          mountPath: /data/caddy/
        - name: {{ $.Release.Name }}-config
          mountPath: /etc/caddy/
        resources:
          requests:
            cpu: "{{ $.Values.resources.cpu }}"
            memory: "{{ $.Values.resources.memory }}"
          limits:
            cpu: "{{ $.Values.resources.cpu }}"
            memory: "{{ $.Values.resources.memory }}"
      volumes:
      - name: {{ $.Release.Name }}-config
        configMap:
          name: {{ $.Release.Name }}
  # this is why it needs to be a statefulset, the persistent path for certs
  # if it is set up with redis/s3/whatever it can be a deployment again
  volumeClaimTemplates:
  - metadata:
      name: {{ $.Release.Name }}-data
    spec:
      accessModes:
      - "ReadWriteOnce"
      # using the "local path provisioner" by rancher, so stored on disk
      # https://github.com/rancher/local-path-provisioner
      # in real production, this would be better off provisioned as e.g. EBS
      storageClassName: "local-path"
      resources:
        requests:
          storage: 1Gi
